layout(local_size_x = 1, local_size_y = 1) in;

uniform mat4 stableProj;

struct ClusterTile
{
    vec4 minPoint;
    vec4 maxPoint;
};

layout (std430, binding = 1) buffer clusterTilesSSBO
{
    ClusterTile clusterTiles[];
};

// Creates a line from the eye to the screenpoint, then finds its intersection
// With a z oriented plane located at the given distance to the origin
vec3 lineIntersectionToZPlane(vec3 A, vec3 B, float zDistance)
{
    // Because this is a Z based normal this is fixed
    const vec3 normal = vec3(0.0, 0.0, 1.0);

    vec3 ab = B - A;

    // Computing the intersection length for the line and the plane
    float t = (zDistance - dot(normal, A)) / dot(normal, ab);

    // Computing the actual xyz position of the point along the line
    vec3 result = A + t * ab;

    return result;
}

vec4 clipToView(vec4 clip)
{
    vec4 view = clip * inverse(stableProj);
    view = view / view.w;
    return view;
}

void main()
{
    // Eye position is zero in view space
    const vec3 eyePos = vec3(0.0);

    // Per Tile variables
    uint tileIndex = gl_WorkGroupID.x +
        gl_WorkGroupID.y * gl_NumWorkGroups.x +
        gl_WorkGroupID.z * (gl_NumWorkGroups.x * gl_NumWorkGroups.y);

    // Pass min and max to view space
    vec3 maxPoint_vS = clipToView(vec4((vec2(gl_WorkGroupID.x + 1, gl_WorkGroupID.y + 1) / vec2(gl_NumWorkGroups.xy)) * 2.0 - 1.0, -1.0, 1.0)).xyz;
    vec3 minPoint_vS = clipToView(vec4((vec2(gl_WorkGroupID.xy) / vec2(gl_NumWorkGroups.xy)) * 2.0 - 1.0, -1.0, 1.0)).xyz;

    float C = stableProj[2][2];
    float D = stableProj[2][3];
    float zNear = D / (C - 1.0);
    float zFar = D / (C + 1.0);

    // Near and far values of the cluster in view space
    float tileNear = -zNear * pow(zFar/ zNear, gl_WorkGroupID.z / float(gl_NumWorkGroups.z));
    float tileFar = -zNear * pow(zFar/ zNear, (gl_WorkGroupID.z + 1) / float(gl_NumWorkGroups.z));

    // Finding the 4 intersection points made from the maxPoint to the cluster near/far plane
    vec3 minPointNear = lineIntersectionToZPlane(eyePos, minPoint_vS, tileNear);
    vec3 minPointFar = lineIntersectionToZPlane(eyePos, minPoint_vS, tileFar);
    vec3 maxPointNear = lineIntersectionToZPlane(eyePos, maxPoint_vS, tileNear);
    vec3 maxPointFar = lineIntersectionToZPlane(eyePos, maxPoint_vS, tileFar);

    clusterTiles[tileIndex].minPoint = vec4(min(min(minPointNear, minPointFar),min(maxPointNear, maxPointFar)), 0.0);
    clusterTiles[tileIndex].maxPoint = vec4(max(max(minPointNear, minPointFar),max(maxPointNear, maxPointFar)), 0.0);
}
